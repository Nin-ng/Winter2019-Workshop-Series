library(xml2)
library(rvest)
# Step two: Get URL containing information you want
# Note: strings in R must be in double quotes ("")
url = "https://en.wikipedia.org/wiki/Major_League_Baseball_Most_Valuable_Player_Award"
# Step three:
url_contents = read_html(url) # Get HTML of page
url_contents
# Step Four: Getting the table
mvp_table_html = html_node(url_contents, xpath ='//*[@id="mw-content-text"]/div/table[4]')
mvp_table_df = html_table(mvp_table_html) # get table of html table
View(mvp_table_df)
1
mvp_table_df$`American League winner` <-
x = 1
mvp_table_df$`American League winner` <-
x = 1
x  = 1
x
mvp_table_df$`American League winner` <- gsub("[†§^()0-9]+", "", mvp_table_df$`American League winner`)
mvp_table_df$`National League winner` <- gsub("[†§^()0-9]+", "", mvp_table_df$`National League winner`)
tail(mvp_table_df$`American League winner`)
1
"dog", "cat", "cow"
c("dog", "cat", "chinchilla")
# --------------------
# Send commands to R by typing your command and pressing <Enter>.
3
# You can use R to do arithmetic.+ / - ^
3+1
3/1
4^2
5*3
5-3
# You can also create "variables" to save values or results from computations.
my_variable = 141
my_variable
my_variable
my_variable
my_variable
my_variable
my_variable
my_variable
# You can use either `=` or `<-` to create variables. They are equivalent.
my_variable2 <- 130
# You can use variables like any other value.
my_variable - 10
my_variable * my_variable2
1,2
# Vectors are a major feature of R. You can combine values into a vector with
# `c()`.
c(1,2)
x =  c(1,2,3)
x
x = c("dog", "cat")
x
# Many operations on vectors are element-by-element.
c(1, 2) + c(4, 5)
c(1, 2, 3) + c(4, 5)
# Many operations on vectors are element-by-element.
c(1, 2) + c(4, 5)
c(1, 2, 3) + c(4, 5)
# * Ordinal -- size, rank ...
# Numerical
# * Discrete --  age, year ...
# * Continuous -- height, weight..
# Image
# Spatial
# Text
# .....
# R's Data Types --------------------
# use typeof()
typeof("hello")
typeof("5.141")
typeof(5.141)
typeof(1+3i)
typeof(c)
typeof(3)
typeof(3L)
x = c("5.1", "3.2", "7")
typeof(x)
y = c(5, "integer", 4.1)
typeof(y)
mean("5.1")
mean(5.1)
## Characteristics of vectors: typeof, mode, class, attribute
x = c(1,3,4,6.7,-4,NA,-2.9)
x
length(x)
sum(x)
# seq(from, to, by, length.out): generating an arithmetic sequences.
seq(2, 18, 4) # outputs [2 6 10 14 18]
?seq
# rep: repeat
# rep(x, times), rep(x, length.out), rep(x, each)
rep(5, 10) # outputs a vector of length 10 containing the number 5 rep for repeat
rep(1:5, each = 2)
# > vector arithmetic operations
x = c(1,2,4,2.5,-1.7,1)
x + w  # no error displayed, but not quite a mathematically valid operation
w = c(1:4)  # vector of length 4
w = c(1:3)  # equals c(1,2,3)
# > vector arithmetic operations
x = c(1,2,4,2.5,-1.7,1)
# Recycling
x + 100
x + w  # no error displayed, but not quite a mathematically valid operation
length(x)
length(w)
swirl()
library(swirl)
install.packages("swirl")
swirl
library(swirl)
download.file("http://www.openintro.org/stat/data/mlb11.RData", destfile = "mlb11.RData")
load("mlb11.RData")
mlb11
dim(mlb11)
names(mlb11)
mlb11$runs
head(mlb11)
mlb11
dim(mlb11)
names(mlb11)
View(mlb11)
View(mlb11)
# Try accessing the number of hits for each team!
mlb11$hits
# tail() shows last 6 rows of data
tail(mlb11)
install.packages("mosaic")
library(mosaic)
library(mosaic)
xyplot(runs ~ hits, data=mlb11)
# You could be wondering how you were supposed to know what arguments to input
# To read what a function does use a question mark followed by the function
?xyplot
# Now let's look at the number of runs scored by itself
histogram( ~ runs, data=mlb11)
bwplot( ~ runs, data=mlb11)
1992+101010
210+930
# Can add entire columns together
mlb11$homeruns + mlb11$strikeouts
4*6+2
4*(6+2)
mlb11$homeruns > 200
mlb11$team[mlb11 > 200]
# Question! How can we figure out what teams these are?
mlb11[mlb11$homeruns > 200,]
# Can use this information to find the IQR (not super important for our purposes)
# IQR is where 50% of the data lives
734 - 629
# Can compute these numbers individually
var(~runs, data=mlb11)
median(~runs, data=mlb11)
favstats(~runs, data=mlb11)
# Can't take the same approach with categorical data
mlb11$HighHR <- mlb11$homeruns >= 200
mlb11$HighHR
tally(~ HighHR, data=mlb11)
# Relative Frequency Distribution
tally(~ HighHR, data=mlb11, format="proportion")
# Now let's make a barchart with of our new variable
barchart(tally(~HighHR, data=mlb11, margins=FALSE), horizontal=FALSE)
# Notice we nested R functions here, this could just as easily been
HR <- tally(~ HighHR, data=mlb11, margins=FALSE)
barchart(HR, horizontal=FALSE)
# Challenges:
# Create a numerical summary for stolen_bases and wins, and compute the interquartile range for each.
fav_stats(~stolen_bases, data=mlb11)
# Challenges:
# Create a numerical summary for stolen_bases and wins, and compute the interquartile range for each.
favstats(~stolen_bases, data=mlb11)
favstats(~wins, data=mlb11)
130.75-89.75
90-72
# Compute the relative frequency distribution for teams with at least 90 wins. How many teams reached
# 90 wins?
mlb11$HighW <- mlb11$wins >= 90
mlb11$HighW
# Relative Frequency Distribution
tally(~ HighW, data=mlb11, format="proportion")
tally(HighW ~ HighHR, data=mlb11, format="count")
# We've mentioned that dataframes are spreadsheet like objects
# and as a result, they have spreadsheet like row-column notation
# For example, to access the 6th column of the 7th row you could do something like
mlb11[7,6]
# This is going to show the batting average of the 7th row team
# What is that team? Let's find out
mlb11[7,1]
# What's the 6th column correspond to?
names(mlb11)
# To see the batting average for the first 10 teams, we could do
mlb11[1:10,6]
# Recall the ":" operator is equivalent to a "-" in English such as 1-10
1:10
# We could show the first ten rows of all variables with
mlb11[1:10,]
# If you don't place an argument it'll return all
mlb11[,6]
# Batting average of all
mlb11$bat_avg
# Could also use this principle to look at specific instances in column
mlb11$bat_avg[7]
